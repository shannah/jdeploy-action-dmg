name: 'Create DMG and Upload to Release'
description: 'Generates DMG files using jDeploy and uploads them to a GitHub release'
author: 'Steve Hannah'
inputs:
  jdeploy_version:
    description: 'The version of jDeploy to use. Prefix with "git://" to build from a Git branch, tag, or commit hash.'
    default: 'git://feat/tag-github-release-note-links'
    required: true
  release_tag:
    description: 'The tag name of the release to upload the DMG to. If not specified, the action will attempt to determine it automatically.'
    required: false
  github_token:
    description: 'GitHub token for authentication'
    required: true
  target_repository:
    description: Optional target repository where to publish releases.
    required: false
    default: ${{ github.repository }}
  notarization_password:
    description: 'Notarization password for macOS code signing'
    required: false
  developer_id:
    description: 'Apple Developer ID for macOS code signing'
    required: false
  developer_team_id:
    description: 'Apple Developer Team ID for macOS code signing'
    required: false
  developer_certificate_name:
    description: 'Certificate name for macOS code signing'
    required: false
  developer_certificate_p12_base64:
    description: 'Base64-encoded P12 certificate for macOS code signing'
    required: false
  developer_certificate_password:
    description: 'Password for the P12 certificate'
    required: false

runs:
  using: 'composite'
  steps:

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'

    # Conditional step to set up Java if jdeploy_version starts with git://
    - name: Set up Java for jDeploy
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') }}
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'zulu'
      id: setup-java-jdeploy

    - name: Set jDeploy Source Environment Variable
      shell: bash
      run: echo "JDEPLOY_SOURCE=https://github.com/${{ inputs.target_repository }}" >> $GITHUB_ENV

    # Corrected Extract jDeploy Version Step
    - name: Extract jDeploy Version
      shell: bash
      run: |
        jdeploy_version="${{ inputs.jdeploy_version }}"
        if [[ "$jdeploy_version" == git://* ]]; then
          JDEPLOY_REF="${jdeploy_version#git://}"
          echo "JDEPLOY_REF=$JDEPLOY_REF" >> $GITHUB_ENV
          echo "JDEPLOY_EXEC=jdeploy" >> $GITHUB_ENV
        else
          echo "JDEPLOY_VERSION=$jdeploy_version" >> $GITHUB_ENV
          echo "JDEPLOY_EXEC=jdeploy" >> $GITHUB_ENV
        fi

    # Determine release_tag if not specified
    - name: Determine Release Tag
      shell: bash
      run: |
        if [ -z "${{ inputs.release_tag }}" ]; then
          if [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
            RELEASE_TAG="${GITHUB_REF_NAME}"
          elif [[ "$GITHUB_REF_TYPE" == "branch" ]]; then
            RELEASE_TAG="${GITHUB_REF_NAME}"
          else
            echo "Cannot determine release tag from GITHUB_REF_TYPE: $GITHUB_REF_TYPE"
            exit 1
          fi
        else
          RELEASE_TAG="${{ inputs.release_tag }}"
        fi
        echo "Using release tag: $RELEASE_TAG"
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

    # Checkout jDeploy source if using git:// version
    - name: Checkout jDeploy Source
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') }}
      shell: bash
      run: |
        git clone https://github.com/shannah/jdeploy.git jdeploy-source
        cd jdeploy-source
        git checkout "$JDEPLOY_REF"

    # Build jDeploy from Source
    - name: Build jDeploy from Source
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') }}
      shell: bash
      run: |
        # Use isolated JAVA_HOME if set
        if [ -n "${{ steps.setup-java-jdeploy.outputs.path }}" ]; then
          export JAVA_HOME="${{ steps.setup-java-jdeploy.outputs.path }}"
          export PATH="$JAVA_HOME/bin:$PATH"
        fi
        cd jdeploy-source/shared
        mvn clean install -DskipTests --batch-mode --no-transfer-progress
        cd ../cli
        mvn clean package -DskipTests --batch-mode --no-transfer-progress
        npm install
        npm link

    # Install jDeploy from npm if not using git:// version
    - name: Install jDeploy from npm
      if: ${{ !startsWith(inputs.jdeploy_version, 'git://') }}
      shell: bash
      run: npm install -g jdeploy@${{ inputs.jdeploy_version }}

    - name: Set jdeploy.jdeployVersion for Branch
      if: ${{ github.ref_type == 'branch' }}
      shell: bash
      run: |
        if [[ "${{ startsWith(inputs.jdeploy_version, 'git://') }}" == "true" ]]; then
          npm pkg set jdeploy.jdeployVersion='latest'
        else
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
        fi
        npm pkg set version="0.0.0-${{ github.ref_name }}"
        npm pkg set jdeploy.commitHash="$GITHUB_SHA"
      env:
        GH_TOKEN: ${{ github.actor }}:${{ inputs.github_token }}

    - name: Sanitize version name
      shell: bash
      if: ${{ github.ref_type == 'tag' }}
      run: |
        TAG_VERSION=${{ github.ref_name }}
        if [[ $TAG_VERSION} = v* ]]; then
          echo "TAG_VERSION=${TAG_VERSION:1}" >> $GITHUB_ENV
        else
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV
        fi
    - name: Prepare Installer Bundles for Branch
      if: ${{ github.ref_type == 'branch' }}
      shell: bash
      run: |
        npm pkg set version="0.0.0-${{ github.ref_name }}"
        if [[ "${{ startsWith(inputs.jdeploy_version, 'git://') }}" == "true" ]]; then
          npm pkg set jdeploy.jdeployVersion='latest'
        else
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
        fi
        npm pkg set jdeploy.commitHash="$GITHUB_SHA"
      env:
        GH_TOKEN: ${{ github.actor }}:${{ inputs.github_token }}

    - name: Prepare Installer Bundles for Tag
      if: ${{ github.ref_type == 'tag' }}
      shell: bash
      run: |
        npm pkg set version="$TAG_VERSION"
        if [[ "${{ startsWith(inputs.jdeploy_version, 'git://') }}" == "true" ]]; then
          npm pkg set jdeploy.jdeployVersion='latest'
        else
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
        fi
        npm pkg set jdeploy.commitHash="$GITHUB_SHA"
        npm pkg set jdeploy.gitTag="${{ github.ref_name }}"
      env:
        GH_TOKEN: ${{ github.actor }}:${{ inputs.github_token }}

    # Install MacOS Certificates if provided
    - name: Install MacOS Certificates
      if: ${{ inputs.developer_certificate_p12_base64 && inputs.developer_certificate_password }}
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ inputs.developer_certificate_p12_base64 }}
        p12-password: ${{ inputs.developer_certificate_password }}
        keychain: 'build'

    # Extract Certificate Name and Team ID if not provided
    - name: Extract Certificate Name and Team ID
      if: ${{ (!inputs.developer_certificate_name || !inputs.developer_team_id) && inputs.developer_certificate_p12_base64 && inputs.developer_certificate_password }}
      shell: bash
      env:
        P12_BASE64: ${{ inputs.developer_certificate_p12_base64 }}
        P12_PASSWORD: ${{ inputs.developer_certificate_password }}
      run: |
        echo "Extracting developer_certificate_name and developer_team_id from the P12 certificate"

        # Check if P12 base64 and password are provided
        if [ -z "$P12_BASE64" ] || [ -z "$P12_PASSWORD" ]; then
          echo "Error: 'developer_certificate_p12_base64' and 'developer_certificate_password' must be provided to extract certificate information."
          exit 1
        fi

        # Decode the base64-encoded P12 certificate
        echo "$P12_BASE64" | base64 --decode > certificate.p12

        # Extract the certificate to a PEM file
        openssl pkcs12 -in certificate.p12 -nokeys -passin pass:"$P12_PASSWORD" -out cert.pem

        # Extract the subject from the certificate
        CERT_SUBJECT=$(openssl x509 -in cert.pem -noout -subject)
        echo "Certificate subject: $CERT_SUBJECT"

        # Remove the 'subject=' prefix
        CERT_SUBJECT=${CERT_SUBJECT#subject=}

        # Extract the Developer Certificate Name from CN field
        DEVELOPER_CERTIFICATE_NAME=$(echo "$CERT_SUBJECT" | sed -n 's/.*CN = \(.*\), OU =.*/\1/p')

        # If the above didn't work, try capturing everything after 'CN = '
        if [ -z "$DEVELOPER_CERTIFICATE_NAME" ]; then
          DEVELOPER_CERTIFICATE_NAME=$(echo "$CERT_SUBJECT" | sed -n 's/.*CN = \(.*\)/\1/p')
        fi

        # Extract the Team ID from UID field
        TEAM_ID=$(echo "$CERT_SUBJECT" | sed -n 's/.*UID = \([A-Z0-9]*\), CN =.*/\1/p')

        # If the above didn't work, try capturing everything after 'UID = '
        if [ -z "$TEAM_ID" ]; then
          TEAM_ID=$(echo "$CERT_SUBJECT" | sed -n 's/.*UID = \([A-Z0-9]*\)/\1/p')
        fi

        # Output the extracted values for debugging (ensure sensitive data is not exposed)
        echo "Extracted developer_certificate_name: '$DEVELOPER_CERTIFICATE_NAME'"
        echo "Extracted developer_team_id: '$TEAM_ID'"

        # Set the environment variables if they were successfully extracted
        if [ -n "$DEVELOPER_CERTIFICATE_NAME" ]; then
          echo "JDEPLOY_MAC_DEVELOPER_CERTIFICATE_NAME=$DEVELOPER_CERTIFICATE_NAME" >> $GITHUB_ENV
        else
          echo "Error: Could not extract 'developer_certificate_name' from the certificate."
          exit 1
        fi

        if [ -n "$TEAM_ID" ]; then
          echo "JDEPLOY_MAC_DEVELOPER_TEAM_ID=$TEAM_ID" >> $GITHUB_ENV
        else
          echo "Error: Could not extract 'developer_team_id' from the certificate."
          exit 1
        fi

        # Clean up temporary files
        rm -f certificate.p12 cert.pem


    # Set Code Signing Environment Variables
    - name: Set Code Signing Environment Variables
      shell: bash
      run: |
        echo "Setting code signing environment variables"
        # Set each environment variable if the input is provided
        if [ -n "${{ inputs.notarization_password }}" ]; then
          echo "JDEPLOY_MAC_NOTARIZATION_PASSWORD=${{ inputs.notarization_password }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.developer_id }}" ]; then
          echo "JDEPLOY_MAC_DEVELOPER_ID=${{ inputs.developer_id }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.developer_certificate_name }}" ]; then
          echo "JDEPLOY_MAC_DEVELOPER_CERTIFICATE_NAME=${{ inputs.developer_certificate_name }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.developer_team_id }}" ]; then
          echo "JDEPLOY_MAC_DEVELOPER_TEAM_ID=${{ inputs.developer_team_id }}" >> $GITHUB_ENV
        fi

    # Enable code-signing
    - name: Enable code-signing
      shell: bash
      if: ${{ env.JDEPLOY_MAC_DEVELOPER_CERTIFICATE_NAME && inputs.developer_certificate_p12_base64 && inputs.developer_certificate_password }}
      run: |
        npm pkg set jdeploy.codesign=true --json

    - name: Enable notarization
      shell: bash
      if: ${{ inputs.developer_id && inputs.notarization_password }}
      run: |
        npm pkg set jdeploy.notarize=true --json

    # Build DMGs using jDeploy
    - name: Build DMGs
      shell: bash
      run: |
        ${{ env.JDEPLOY_EXEC }} dmg
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    # Install jq (needed for JSON parsing)
    - name: Install jq
      shell: bash
      run: brew install jq

    # Upload DMGs to Release
    - name: Upload DMGs to Release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        # Get release ID
        release_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$RELEASE_TAG")

        release_id=$(echo "$release_response" | jq -r .id)

        if [ "$release_id" == "null" ] || [ -z "$release_id" ]; then
          echo "Release not found for tag '$RELEASE_TAG'"
          exit 1
        fi

        for dmg_file in ./jdeploy/installers/*.dmg; do
          echo "Uploading $dmg_file to release ID $release_id"
          asset_name=$(basename "$dmg_file")
          asset_name_encoded=$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))" "$asset_name")

          # Delete existing asset if it exists
          existing_asset_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/$release_id/assets" \
            | jq -r ".[] | select(.name == \"$asset_name\") | .id")

          if [ -n "$existing_asset_id" ] && [ "$existing_asset_id" != "null" ]; then
            echo "Deleting existing asset with ID $existing_asset_id"
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/assets/$existing_asset_id"
          fi

          # Upload the file
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/x-apple-diskimage" \
            --data-binary @"$dmg_file" \
            "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/$release_id/assets?name=$asset_name_encoded"
        done

    - name: Update Release Notes Links
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        RELEASE_TAG: ${{ env.RELEASE_TAG }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        # Get release ID and assets
        release_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$RELEASE_TAG")
        
        release_id=$(echo "$release_response" | jq -r .id)
        
        if [ "$release_id" == "null" ] || [ -z "$release_id" ]; then
          echo "Release not found for tag '$RELEASE_TAG'"
          exit 1
        fi

        # Get assets array
        assets=$(echo "$release_response" | jq -r '.assets[] | @base64')

        declare -A bundle_links

        # Iterate over assets to extract download URLs and map to bundle types
        for asset_encoded in $assets; do
          asset=$(echo "$asset_encoded" | base64 --decode)
          asset_name=$(echo "$asset" | jq -r '.name')
          download_url=$(echo "$asset" | jq -r '.browser_download_url')

          # Only consider assets that are DMG files
          if [[ "$asset_name" != *.dmg ]]; then
            # Not a DMG file, skip it
            continue
          fi

          # Determine the bundle type based on the asset name
          if [[ "$asset_name" == *"mac-arm64"* ]]; then
            bundle_type="mac-arm64"
          elif [[ "$asset_name" == *"mac-x64"* ]]; then
            bundle_type="mac-x64"
          else
            echo "Unknown bundle type for asset: $asset_name"
            continue
          fi

          # Add to the bundle_links associative array
          bundle_links["$bundle_type"]="$download_url"
        done

        # Prepare arguments for jdeploy github-update-release-links
        ARGS=()
        for bundle_type in "${!bundle_links[@]}"; do
          download_url="${bundle_links[$bundle_type]}"
          ARGS+=("$bundle_type" "$download_url")
        done

        if [ ${#ARGS[@]} -eq 0 ]; then
          echo "No DMG assets found to update release notes."
          exit 0
        fi

        # Run the jdeploy github-update-release-links command
        ${{ env.JDEPLOY_EXEC }} github-update-release-links "${ARGS[@]}"

